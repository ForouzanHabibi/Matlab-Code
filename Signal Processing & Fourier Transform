clc; clear; close all;

% Define signal parameters
Fs = 1000;   % Sampling frequency (Hz)
T = 1/Fs;    % Sampling period
L = 1000;    % Length of signal (samples)
t = (0:L-1) * T; % Time vector

% Create a synthetic signal: 10 Hz + 50 Hz sine waves + noise
f1 = 10; f2 = 50;  % Frequencies of the signal components
signal = sin(2*pi*f1*t) + 0.5*sin(2*pi*f2*t) + 0.5 * randn(size(t));

% Compute the Fourier Transform (FFT)
Y = fft(signal);
f = Fs * (0:(L/2)) / L;  % Frequency vector

% Compute the amplitude spectrum
P2 = abs(Y/L);       % Two-sided spectrum
P1 = P2(1:L/2+1);    % Single-sided spectrum
P1(2:end-1) = 2*P1(2:end-1); % Adjust amplitude

% Plot the original signal in time domain
figure;
subplot(3,1,1);
plot(t, signal, 'b');
xlabel('Time (s)');
ylabel('Amplitude');
title('Original Signal with Noise');
grid on;

% Plot the frequency spectrum (Fourier Transform)
subplot(3,1,2);
plot(f, P1, 'r');
xlabel('Frequency (Hz)');
ylabel('|P1(f)|');
title('Magnitude Spectrum (FFT)');
grid on;

% Apply a Low-pass filter to remove high-frequency noise
fc = 30;  % Cut-off frequency (Hz)
Y_filtered = Y;
Y_filtered(f > fc) = 0;  % Remove high-frequency components

% Reconstruct the signal using Inverse Fourier Transform (IFFT)
filtered_signal = ifft(Y_filtered, 'symmetric');

% Plot the filtered signal
subplot(3,1,3);
plot(t, filtered_signal, 'g');
xlabel('Time (s)');
ylabel('Amplitude');
title('Filtered Signal (Low-pass)');
grid on;
